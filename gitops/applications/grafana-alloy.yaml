apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: grafana-alloy
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://grafana.github.io/helm-charts
    chart: alloy
    targetRevision: 0.3.0
    helm:
      values: |
        controller:
          type: daemonset

        alloy:
          configMap:
            content: |
              // Kubernetes service discovery for nodes
              discovery.kubernetes "nodes" {
                role = "node"
              }

              // Kubernetes service discovery for pods
              discovery.kubernetes "pods" {
                role = "pod"
              }

              // Relabel rules for nodes
              prometheus.relabel "nodes" {
                forward_to = [prometheus.scrape.nodes.receiver]

                rule {
                  source_labels = ["__meta_kubernetes_node_label_(.+)"]
                  target_label  = "${1}"
                  action        = "labelmap"
                  regex         = "__meta_kubernetes_node_label_(.+)"
                }
              }

              // Relabel rules for pods  
              prometheus.relabel "pods" {
                forward_to = [prometheus.scrape.pods.receiver]

                rule {
                  source_labels = ["__meta_kubernetes_pod_label_(.+)"]
                  target_label  = "${1}"
                  action        = "labelmap"
                  regex         = "__meta_kubernetes_pod_label_(.+)"
                }
              }

              // Scrape nodes
              prometheus.scrape "nodes" {
                targets    = discovery.kubernetes.nodes.targets
                forward_to = [prometheus.relabel.nodes.receiver]
              }

              // Scrape pods
              prometheus.scrape "pods" {
                targets    = discovery.kubernetes.pods.targets
                forward_to = [prometheus.relabel.pods.receiver]
              }

              // Remote write to Mimir
              prometheus.remote_write "mimir" {
                endpoint {
                  url = "http://lgtm-stack-mimir-nginx.monitoring.svc.cluster.local/api/v1/push"
                }
              }

              // OTLP receiver for traces
              otelcol.receiver.otlp "default" {
                grpc {
                  endpoint = "0.0.0.0:4317"
                }
                http {
                  endpoint = "0.0.0.0:4318"
                }

                output {
                  traces = [otelcol.exporter.otlp.tempo.input]
                }
              }

              // OTLP exporter to Tempo
              otelcol.exporter.otlp "tempo" {
                client {
                  endpoint = "lgtm-stack-tempo-distributor.monitoring.svc.cluster.local:4317"
                  tls {
                    insecure = true
                  }
                }
              }

  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
